---
import MarkdownRenderer from "./MarkdownRenderer.tsx";
import type { SectionT } from "../utils/data";

import quiz from "../styles/quiz.css";

export interface Props {
    section: SectionT;
    title?: string;
    lang?: string;
    currentSection?: any;
}

const { section, title, lang, currentSection } = Astro.props;

import "../styles/section.css";

// Get section color for CSS variable
const sectionColor = section.color_primary || "#521d3a";
---

<section class="content">
    <div
        id="section-title"
        class={`section-title section-${section.sorting} mb-2`}
    >
        <h1 class="bg-primary px-2">
            {section.title}
        </h1>
        {
            section.icon && (
                <img class="icon pl-2" src={section.icon.url} alt="icon" />
            )
        }
    </div>
    {
        section.content && (
            <div class="section-body rounded p-3 color-bg-default">
                <div class="section-description">
                    <MarkdownRenderer content={section.content} client:load />
                </div>
            </div>
        )
    }
    {
        section.chapters && section.chapters.length > 0 && (
            <div class="chapters">
                {section.chapters
                    .sort((a, b) => (a.sorting || 0) - (b.sorting || 0))
                    .map((chapter) => (
                        <div id={chapter.slug} class="chapter">
                            <h2>{chapter.title}</h2>
                            <div class="chapter-content">
                                <MarkdownRenderer content={chapter.content} client:load />
                            </div>
                            {chapter.targets && chapter.targets.length > 0 && (
                                <div class="targets">
                                    <h3>Zielgruppe</h3>
                                    <div class="targets-list">
                                        {chapter.targets.map((target) => (
                                            <div class="target-item">
                                                <span class="target-role">
                                                    {target.role}
                                                </span>
                                                <h4>{target.title}</h4>
                                                <MarkdownRenderer
                                                    content={target.content}
                                                    client:load
                                                />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                    ))}
            </div>
        )
    }

    <!-- Back to top button -->
    <button
        id="back-to-top"
        class="opacity-0 fixed bottom-4 right-4 h-10 w-10 rounded-full bg-primary text-white shadow-lg hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50 transition-opacity duration-300 z-50"
        onclick="document.getElementById('section-title')?.scrollIntoView({behavior: 'smooth'})"
        aria-label="Nach oben"
    >
        <svg
            aria-hidden="true"
            focusable="false"
            class="octicon octicon-move-to-top m-auto"
            viewBox="0 0 16 16"
            width="16"
            height="16"
            fill="currentColor"
            ><path  
                d="M3 2.25a.75.75 0 0 1 .75-.75h8.5a.75.75 0 0 1 0 1.5h-8.5A.75.75 0 0 1 3 2.25Zm5.53 2.97 3.75 3.75a.749.749 0 1 1-1.06 1.06L8.75 7.561v6.689a.75.75 0 0 1-1.5 0V7.561L4.78 10.03a.749.749 0 1 1-1.06-1.06l3.75-3.75a.749.749 0 0 1 1.06 0Z"
            ></path></svg
        >
    </button>
</section>

<script define:vars={{ sectionColor }}>
    // Set section primary color as CSS variable
    const sectionElement = document.querySelector("section.content");
    if (sectionElement) {
        // set it on :root as well for global access
        document.documentElement.style.setProperty(
            "--color-primary",
            sectionColor,
        );
    }
    document.addEventListener("DOMContentLoaded", function () {
        // Show/hide back to top button based on scroll position
        const backToTopButton = document.getElementById("back-to-top");
        if (backToTopButton) {
            window.addEventListener("scroll", function () {
                if (window.scrollY > 300) {
                    backToTopButton.classList.remove("opacity-0");
                    backToTopButton.classList.add("opacity-100");
                } else {
                    backToTopButton.classList.remove("opacity-100");
                    backToTopButton.classList.add("opacity-0");
                }
            });
        }
    });
</script>
