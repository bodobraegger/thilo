---
import MarkdownRenderer from './MarkdownRenderer.astro';
import type { SectionT } from '../utils/data';
import { generateColorCSSProperties } from '../utils/colors';

export interface Props {
  section: SectionT;
}

const { section } = Astro.props;

import '../styles/section.css';

// Generate complete color palette from section colors
const sectionColorStyle = generateColorCSSProperties(
  section.color_primary || '#521d3a'
);

---

<section class="content" style={sectionColorStyle}>

  <div id="section-title" class={`section-title section-${section.sorting} mb-2`}>
    <h1 class="bg-primary px-2">
      {section.title}
    </h1>
    {section.icon && <img class="icon pl-2" src={section.icon.url} alt="icon" />}
  </div>
  {section.content && (
    <div class="section-body rounded p-3 color-bg-default">
      <div class="section-description">
        <MarkdownRenderer content={section.content} />
      </div>
    </div>
  )}
  {section.chapters && section.chapters.length > 0 && (
    <div class="chapters">
      {section.chapters
        .sort((a, b) => (a.sorting || 0) - (b.sorting || 0))
        .map(chapter => (
          <div id={chapter.slug} class="chapter">
            <h2>{chapter.title}</h2>
            <div class="chapter-content">
              <MarkdownRenderer content={chapter.content} />
            </div>
            {chapter.targets && chapter.targets.length > 0 && (
              <div class="targets">
                <h3>Zielgruppe</h3>
                <div class="targets-list">
                  {chapter.targets.map(target => (
                    <div class="target-item">
                      <span class="target-role">{target.role}</span>
                      <h4>{target.title}</h4>
                      <MarkdownRenderer content={target.content} />
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
    </div>
  )}

  <!-- Back to top button -->
  <button 
    id="back-to-top" 
    class="back-to-top" 
    onclick="document.getElementById('section-title')?.scrollIntoView({behavior: 'smooth'})"
    aria-label="Nach oben"
  >
    â†‘ Nach oben
  </button>
</section>



<script define:vars={{ sectionColorCSS: sectionColorStyle }}>
  // Apply section colors immediately and on DOM ready
  function applySectionColors() {
    if (sectionColorCSS) {
      // Use global function if available, otherwise apply directly
      if (typeof window.updateThemeColors === 'function') {
        window.updateThemeColors(sectionColorCSS);
      } else {
        // Fallback: Parse the CSS properties and set them on document root
        const colorProperties = sectionColorCSS.split('\n');
        colorProperties.forEach(function(property) {
          if (property.trim() && property.includes(':')) {
            const [key, value] = property.split(':');
            if (key && value) {
              const cleanKey = key.trim();
              const cleanValue = value.replace(';', '').trim();
              document.documentElement.style.setProperty(cleanKey, cleanValue);
            }
          }
        });
      }
      
      // Set a marker to indicate section colors are loaded
      document.documentElement.setAttribute('data-section-colors-loaded', 'true');
      document.documentElement.setAttribute('data-current-section-color', sectionColorCSS.split('\n')[0] || '');
    }
  }

  // Apply colors immediately (for page loads)
  applySectionColors();

  // Also apply on DOM ready (for safety)
  document.addEventListener('DOMContentLoaded', function() {
    // Re-apply colors to ensure they override any previous section colors
    applySectionColors();

    // Check if there's a hash in the URL and scroll to it
    const hash = window.location.hash;
    if (hash) {
      const element = document.querySelector(hash);
      if (element) {
        setTimeout(() => {
          element.scrollIntoView({ behavior: 'smooth' });
        }, 100);
      }
    }

    // Show/hide back to top button based on scroll position
    const backToTopButton = document.getElementById('back-to-top');
    if (backToTopButton) {
      window.addEventListener('scroll', function() {
        if (window.scrollY > 300) {
          backToTopButton.style.display = 'block';
        } else {
          backToTopButton.style.display = 'none';
        }
      });

      // Initially hide the button
      backToTopButton.style.display = 'none';
    }
  });

  // Handle page visibility changes (for when returning to tab)
  document.addEventListener('visibilitychange', function() {
    if (!document.hidden) {
      applySectionColors();
    }
  });
</script>
