---
import { marked } from 'marked';

export interface Props {
  content: string;
  class?: string;
}

const { content, class: className = '' } = Astro.props;

// Configure marked options
marked.setOptions({
  gfm: true,
  breaks: true,
});

// Custom renderer for links and images
const renderer = new marked.Renderer();

renderer.link = function(token: any): string {
  const { href, title, text } = token;
  const isExternal = href && (href.startsWith('http') || href.startsWith('//'));
  const titleAttr = title ? ` title="${title}"` : '';
  
  if (isExternal) {
    return `<a href="${href}"${titleAttr} target="_blank" rel="noopener noreferrer">${text}</a>`;
  }
  
  return `<a href="${href}"${titleAttr}>${text}</a>`;
};

renderer.image = function(token: any): string {
  const { href, title, text } = token;
  let imgTag = `<img src="${href}" alt="${text || ''}"`;
  if (title) {
    // Check if title contains style information (from Strapi)
    if (title.includes('width:') || title.includes('height:') || title.includes('float:')) {
      imgTag += ` style="${title}"`;
    } else {
      imgTag += ` title="${title}"`;
    }
  }
  imgTag += ' />';
  return imgTag;
};

marked.use({ renderer });

const processedContent = marked(content || '');
---

<div class={`markdown-content ${className}`} set:html={processedContent} />

