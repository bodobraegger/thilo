---
import { getTranslations, type Locale } from '../i18n';
import { getSectionUrlForLocale } from '../utils/slugMapping';

interface Props {
  locale?: Locale;
  currentSection?: any;
}

const { locale = 'de', currentSection } = Astro.props;
const t = getTranslations(locale);

// Get current URL to determine page type
const url = Astro.url;
const pathname = url.pathname;

// Generate language alternatives for dropdown
let languageAlternatives = [];

if (currentSection) {
  // For section pages, use section-based language switching
  for (const targetLocale of ['de', 'fr', 'it']) {
    if (targetLocale === locale) continue; // Skip current locale
    
    const url = getSectionUrlForLocale(currentSection.id.toString(), targetLocale);
    languageAlternatives.push({ locale: targetLocale, url });
  }

} else {
  // For other pages (index, search, etc.), determine equivalent URLs
  let basePath = pathname;
  
  // Remove locale prefix if present
  if (pathname.startsWith('/fr/')) {
    basePath = pathname.substring(3) || '/';
  } else if (pathname.startsWith('/it/')) {
    basePath = pathname.substring(3) || '/';
  }
  
  // Ensure basePath starts with /
  if (!basePath.startsWith('/')) {
    basePath = '/' + basePath;
  }
  
  // Generate URLs for all locales
  for (const targetLocale of ['de', 'fr', 'it']) {
    if (targetLocale === locale) continue; // Skip current locale
    
    let targetUrl;
    if (targetLocale === 'de') {
      targetUrl = basePath === '/' ? '/' : basePath;
    } else {
      targetUrl = basePath === '/' ? `/${targetLocale}/` : `/${targetLocale}${basePath}`;
    }
    languageAlternatives.push({ locale: targetLocale, url: targetUrl });
  }

}
---

<!-- GitHub Primer styled header -->
<header class="bg-gray-900 text-white border-b border-gray-700 sticky top-0 z-40">
  <div class="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16">
      <!-- Logo and brand -->
      <div class="flex items-center">
        <a href={locale === 'de' ? '/' : `/${locale}/`} class="flex items-center space-x-3 text-white hover:text-gray-200 transition-colors">
          <img src="/logo.svg" alt="Thilo Logo" class="h-8 w-8" />
          <span class="text-xl font-semibold">Thilo</span>
        </a>
      </div>
      
      <!-- Desktop Navigation -->
      <nav class="hidden md:flex items-center space-x-1">
        <a 
          href={locale === 'de' ? '/' : `/${locale}/`}
          class="px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:text-white hover:bg-gray-800 transition-colors"
        >
          {t.translation.homePage.title}
        </a>
        <a 
          href={locale === 'de' ? '/search' : `/${locale}/search`}
          class="px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:text-white hover:bg-gray-800 transition-colors"
        >
          {t.translation.searchPage.title}
        </a>
        <a 
          href={locale === 'de' ? '/impressum' : `/${locale}/impressum`}
          class="px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:text-white hover:bg-gray-800 transition-colors"
        >
          {t.translation.header.imprint}
        </a>
      </nav>
      
      <!-- Right side actions -->
      <div class="flex items-center space-x-3">
        <!-- Search component -->
        <div class="relative">
          <div id="search-input-container" class="max-lg:hidden absolute right-0 top-1/2 transform -translate-y-1/2">
            <div class="flex items-center rounded-md focus-within:ring-2">
              <input 
                type="text" 
                id="header-search-input"
                placeholder={t.translation.searchPage.placeholder}
                class="bg-transparent text-white placeholder-gray-400 px-3 py-2 w-64 text-sm focus:outline-none"
              />
              <button 
                type="button"
                id="search-close"
                class="hidden p-2 text-gray-400 hover:text-white"
                aria-label="Close search"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
          
          <!-- Search button -->
          <button 
            type="button"
            id="search-toggle"
            class="p-2 text-gray-300 hover:text-white hover:bg-gray-800 rounded-md transition-colors"
            aria-label="Search"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </button>
        </div>
        
        <!-- Language selector -->
        <div class="relative">
          <select 
            id="language-select" 
            class="bg-gray-800 text-white border border-gray-600 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            data-current-locale={locale}
            data-alternatives={JSON.stringify(languageAlternatives)}
          >
            <option value="de" selected={locale === 'de'}>DE</option>
            <option value="fr" selected={locale === 'fr'}>FR</option>
            <option value="it" selected={locale === 'it'}>IT</option>
          </select>
        </div>

        <!-- Mobile menu button -->
        <button 
          type="button"
          id="mobile-menu-toggle"
          class="md:hidden p-2 text-gray-300 hover:text-white hover:bg-gray-800 rounded-md transition-colors"
          aria-label="Open menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Mobile menu overlay -->
  <div id="mobile-menu-overlay" class="md:hidden fixed inset-0 z-50 hidden">
    <div class="fixed inset-0 bg-black bg-opacity-50" id="mobile-menu-backdrop"></div>
    <div class="fixed top-0 right-0 w-64 h-full bg-gray-900 shadow-xl">
      <div class="flex items-center justify-between p-4 border-b border-gray-700">
        <span class="text-lg font-semibold text-white">Menu</span>
        <button 
          id="mobile-menu-close"
          class="p-2 text-gray-300 hover:text-white hover:bg-gray-800 rounded-md transition-colors"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <nav class="px-4 py-6 space-y-2">
        <a 
          href={locale === 'de' ? '/' : `/${locale}/`}
          class="block px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:text-white hover:bg-gray-800 transition-colors"
        >
          {t.translation.homePage.title}
        </a>
        <a 
          href={locale === 'de' ? '/search' : `/${locale}/search`}
          class="block px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:text-white hover:bg-gray-800 transition-colors"
        >
          {t.translation.searchPage.title}
        </a>
        <a 
          href={locale === 'de' ? '/impressum' : `/${locale}/impressum`}
          class="block px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:text-white hover:bg-gray-800 transition-colors"
        >
          {t.translation.header.imprint}
        </a>
      </nav>
    </div>
  </div>
</header>

<script>
  // Mobile menu functionality
  const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
  const mobileMenuClose = document.getElementById('mobile-menu-close');
  const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');
  const mobileMenuBackdrop = document.getElementById('mobile-menu-backdrop');

  function openMobileMenu() {
    mobileMenuOverlay?.classList.remove('hidden');
  }

  function closeMobileMenu() {
    mobileMenuOverlay?.classList.add('hidden');
  }

  mobileMenuToggle?.addEventListener('click', openMobileMenu);
  mobileMenuClose?.addEventListener('click', closeMobileMenu);
  mobileMenuBackdrop?.addEventListener('click', closeMobileMenu);

  // Search functionality
  const searchToggle = document.getElementById('search-toggle');
  const searchInputContainer = document.getElementById('search-input-container');
  const searchInput = document.getElementById('header-search-input') as HTMLInputElement | null;
  const searchClose = document.getElementById('search-close');

  function openSearch() {
    searchToggle?.classList.add('hidden');
    searchInputContainer?.classList.remove('hidden');
    searchInput?.focus();
  }

  function closeSearch() {
    searchInputContainer?.classList.add('hidden');
    searchToggle?.classList.remove('hidden');
    if (searchInput) searchInput.value = '';
  }

  function performSearch(query: string) {
    if (query.trim()) {
      window.location.href = `/search?q=${encodeURIComponent(query.trim())}`;
    } else {
      window.location.href = '/search';
    }
  }

  searchToggle?.addEventListener('click', openSearch);
  searchClose?.addEventListener('click', closeSearch);
  
  searchInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && searchInput.value) {
      performSearch(searchInput.value);
    } else if (e.key === 'Escape') {
      closeSearch();
    }
  });

  // Close search when clicking outside
  document.addEventListener('click', (e) => {
    const searchContainer = document.querySelector('#search-input-container');
    const searchButton = document.querySelector('#search-toggle');
    
    if (searchContainer && !searchContainer.classList.contains('hidden')) {
      if (!searchContainer.contains(e.target as Node) && !searchButton?.contains(e.target as Node)) {
        closeSearch();
      }
    }
  });

  // Language switching functionality
  const languageSelect = document.getElementById('language-select') as HTMLSelectElement | null;
  
  languageSelect?.addEventListener('change', async (e) => {
    const selectedLocale = (e.target as HTMLSelectElement).value;
    const currentLocale = languageSelect.dataset.currentLocale;
    const alternatives = languageSelect.dataset.alternatives ? JSON.parse(languageSelect.dataset.alternatives) : [];
    
    if (selectedLocale === currentLocale) {
      return;
    }
    
    const targetUrl = alternatives.find((alt: any) => alt.locale === selectedLocale)?.url;
    
    if (targetUrl) {
      const currentHash = window.location.hash;
      if (currentHash) {
        try {
          const mappedHash = await mapChapterAnchor(currentHash, currentLocale || 'de', selectedLocale);
          window.location.href = targetUrl + (mappedHash ? `#${mappedHash}` : '');
        } catch (error) {
          window.location.href = targetUrl;
        }
      } else {
        window.location.href = targetUrl;
      }
    } else {
      if (selectedLocale === 'de') {
        window.location.href = '/';
      } else {
        window.location.href = `/${selectedLocale}/`;
      }
    }
  });

  // Function to map chapter anchors between languages
  async function mapChapterAnchor(currentHash: string, fromLocale: string, toLocale: string): Promise<string> {
    const chapterSlug = currentHash.replace('#', '');
    
    // Get current section slug from URL
    const currentPath = window.location.pathname;
    let sectionSlug = '';
    
    if (currentPath.startsWith('/fr/')) {
      sectionSlug = currentPath.substring(4);
    } else if (currentPath.startsWith('/it/')) {
      sectionSlug = currentPath.substring(4);
    } else {
      sectionSlug = currentPath.substring(1);
    }
    
    // Remove trailing slash
    sectionSlug = sectionSlug.replace(/\/$/, '');
    
    try {
      // Fetch sections for both languages to find the chapter mapping
      const [fromSections, toSections] = await Promise.all([
        fetch(`https://api.thilo.scouts.ch/sections?_locale=${fromLocale}`).then(r => r.json()),
        fetch(`https://api.thilo.scouts.ch/sections?_locale=${toLocale}`).then(r => r.json())
      ]);
      
      // Helper function to generate slug (matching Astro's slugify utility)
      function generateSlug(text: string): string {
        return text.toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '') // Remove diacritics
          .replace(/[äöü]/g, (match: string) => ({ 'ä': 'ae', 'ö': 'oe', 'ü': 'ue' })[match] || match)
          .replace(/[^a-z0-9\s-]/g, '') // Remove special characters except spaces and hyphens
          .replace(/\s+/g, '-') // Replace spaces with hyphens
          .replace(/-+/g, '-') // Replace multiple hyphens with single hyphen
          .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens
      }
      
      // Find current section in source language
      const fromSection = fromSections.find((s: any) => {
        return generateSlug(s.title) === sectionSlug;
      });
      
      if (!fromSection) return '';
      
      const toSection = toSections.find((s: any) => s.sorting === fromSection.sorting);
      if (!toSection) return '';
      
      const fromChapter = fromSection.chapters?.find((c: any) => {
        return generateSlug(c.title) === chapterSlug;
      });
      if (!fromChapter) return '';
      
      const toChapter = toSection.chapters?.find((c: any) => c.sorting === fromChapter.sorting);
      if (!toChapter) return '';
      
      return generateSlug(toChapter.title);
      
    } catch (error) {
      return '';
    }
  }
</script>
