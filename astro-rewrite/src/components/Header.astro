---
import { getTranslations, type Locale } from '../i18n';
import { generateColorCSSProperties } from '../utils/colors';
import { fetchAllSections, getSectionUrlForLocaleFromCache, type SimpleSectionsData } from '../utils/sectionMappings';

interface Props {
  locale?: Locale;
  currentSection?: any;
}

const { locale = 'de', currentSection } = Astro.props;
const t = getTranslations(locale);

// Generate color CSS properties if we have a current section
const sectionColorStyle = currentSection?.color_primary 
  ? generateColorCSSProperties(currentSection.color_primary)
  : '';

// Get current URL to determine page type
const url = Astro.url;
const pathname = url.pathname;

// Fetch ALL section data at build time
const allSectionsData: SimpleSectionsData = await fetchAllSections();

// Generate language alternatives for dropdown
let languageAlternatives = [];

if (currentSection) {
  // For section pages, use pre-built section mapping
  for (const targetLocale of ['de', 'fr', 'it']) {
    if (targetLocale === locale) continue; // Skip current locale
    
    const url = getSectionUrlForLocaleFromCache(
      currentSection.id.toString(), 
      targetLocale, 
      allSectionsData.sectionMappings
    );
    languageAlternatives.push({ locale: targetLocale, url });
  }
} else {
  // For other pages (index, search, etc.), determine equivalent URLs
  let basePath = pathname;
  
  // Remove locale prefix if present
  if (pathname.startsWith('/fr/')) {
    basePath = pathname.substring(3) || '/';
  } else if (pathname.startsWith('/it/')) {
    basePath = pathname.substring(3) || '/';
  }
  
  // Ensure basePath starts with /
  if (!basePath.startsWith('/')) {
    basePath = '/' + basePath;
  }
  
  // Generate URLs for all locales
  for (const targetLocale of ['de', 'fr', 'it']) {
    if (targetLocale === locale) continue; // Skip current locale
    
    let targetUrl;
    if (targetLocale === 'de') {
      targetUrl = basePath === '/' ? '/' : basePath;
    } else {
      targetUrl = basePath === '/' ? `/${targetLocale}/` : `/${targetLocale}${basePath}`;
    }
    languageAlternatives.push({ locale: targetLocale, url: targetUrl });
  }
}
---

<!-- Store all sections data for JavaScript (like React app) -->
<meta name="language-alternatives" content={JSON.stringify(languageAlternatives)} />
<meta name="all-sections" content={JSON.stringify(allSectionsData.sections)} />
<meta name="current-section-id" content={currentSection ? currentSection.id.toString() : ''} />
<meta name="current-section-sorting" content={currentSection ? currentSection.sorting.toString() : ''} />

<!-- Redesigned Header -->
<header class="bg-primary text-white sticky top-0 z-40">
  <div class="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16">
      <!-- Left side - Sidebar toggle (md screens) + Logo -->
      <div class="flex items-center space-x-3">
        <!-- Sidebar toggle button - visible on medium and small screens -->
        <button 
          type="button"
          id="sidebar-toggle-header"
          class="lg:hidden p-1.5 rounded-md transition-colors bg-white text-gray-700 hover:bg-gray-50 hover:text-gray-900"
          aria-label="Toggle sidebar"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>

      <!-- Center - Search (desktop only) -->
      <div class="hidden lg:flex flex-1 max-w-lg mx-8">
        <div class="w-full">
          <input 
            type="text" 
            id="header-search-input"
            placeholder={t.translation.searchPage.placeholder}
            class="w-full border rounded-md px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:border-transparent placeholder-opacity-70 bg-white text-gray-700 border-gray-300 focus:ring-blue-500"
          />
        </div>
      </div>

      <!-- Right side - Search toggle (mobile) + Menu -->
      <div class="flex items-center space-x-2">
        <!-- Mobile search toggle -->
        <button 
          type="button"
          id="search-toggle-mobile"
          class="lg:hidden p-1.5 rounded-md transition-colors bg-white text-gray-700 hover:bg-gray-50 hover:text-gray-900"
          aria-label="Open search"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </button>

        <!-- Menu dropdown -->
        <div class="relative">
          <button 
            type="button"
            id="menu-dropdown-toggle"
            class="p-1.5 rounded-md transition-colors bg-white text-gray-700 hover:bg-gray-50 hover:text-gray-900"
            aria-label="Open menu"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
            </svg>
          </button>

          <!-- Dropdown menu -->
          <div 
            id="menu-dropdown" 
            class="hidden absolute right-0 mt-2 w-56 bg-white rounded-md shadow-lg border border-gray-200 py-1 z-50"
          >
            <div class="px-4 py-2 border-b border-gray-200">
              <p class="text-xs font-medium text-gray-500 uppercase tracking-wider mb-2">
                Language
              </p>
              
              <!-- Language Options -->
              <button 
                type="button"
                class="w-full text-left flex items-center px-4 py-2 text-sm transition-colors text-gray-700 hover:bg-gray-100 hover:text-gray-900 language-option"
                data-locale="de"
              >
                <span class="mr-2">{locale === 'de' ? '✓' : ''}</span>
                <span>Deutsch</span>
              </button>
              <button 
                type="button"
                class="w-full text-left flex items-center px-4 py-2 text-sm transition-colors text-gray-700 hover:bg-gray-100 hover:text-gray-900 language-option"
                data-locale="fr"
              >
                <span class="mr-2">{locale === 'fr' ? '✓' : ''}</span>
                <span>Français</span>
              </button>
              <button 
                type="button"
                class="w-full text-left flex items-center px-4 py-2 text-sm transition-colors text-gray-700 hover:bg-gray-100 hover:text-gray-900 language-option"
                data-locale="it"
              >
                <span class="mr-2">{locale === 'it' ? '✓' : ''}</span>
                <span>Italiano</span>
              </button>
              
              <!-- Theme Section -->
              <div class="border-t border-gray-200 mt-1">
                <button 
                  type="button"
                  id="theme-toggle"
                  class="w-full text-left block px-4 py-2 text-sm transition-colors text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                >
                  <span class="flex items-center justify-between">
                    <span>Theme</span>
                    <span class="text-xs text-gray-500">Hell</span>
                  </span>
                </button>
              </div>
              
              <!-- Impressum Section -->
              <div class="border-t border-gray-200">
                <a 
                  href={locale === 'de' ? '/impressum' : `/${locale}/impressum`}
                  class="block px-4 py-2 text-sm transition-colors text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                >
                  {t.translation.header.imprint}
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Mobile/Tablet Search Modal -->
  <div id="mobile-search-modal" class="lg:hidden fixed inset-0 z-50 hidden">
    <div class="fixed inset-0 bg-black bg-opacity-50" id="search-modal-backdrop"></div>
    <div class="fixed top-0 left-0 right-0 shadow-xl border-b bg-white border-gray-200">
      <div class="flex items-center p-4 border-b border-gray-200">
        <div class="flex-1 mr-3">
          <input 
            type="text" 
            id="mobile-search-input"
            placeholder={t.translation.searchPage.placeholder}
            class="w-full border rounded-md px-4 py-3 text-base focus:outline-none focus:ring-2 focus:border-transparent placeholder-opacity-70 bg-white text-gray-700 border-gray-300 focus:ring-blue-500"
          />
        </div>
        <button 
          id="mobile-search-close"
          class="p-2 rounded-md transition-colors text-gray-600 hover:bg-gray-100 hover:text-gray-800"
          aria-label="Close search"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <!-- Search suggestions could go here -->
      <div class="p-4">
        <p class="text-sm text-gray-500">Start typing to search...</p>
      </div>
    </div>
  </div>
</header>

<script>
  // Sidebar toggle functionality (for medium screens)
  const sidebarToggleHeader = document.getElementById('sidebar-toggle-header');
  
  sidebarToggleHeader?.addEventListener('click', () => {
    console.log('Header sidebar toggle clicked');
    // This will be handled by the sidebar component
    const sidebarToggleEvent = new CustomEvent('toggleSidebar');
    window.dispatchEvent(sidebarToggleEvent);
    console.log('Toggle event dispatched');
  });

  // Menu dropdown functionality
  const menuDropdownToggle = document.getElementById('menu-dropdown-toggle');
  const menuDropdown = document.getElementById('menu-dropdown');

  function openMenuDropdown() {
    menuDropdown?.classList.remove('hidden');
  }

  function closeMenuDropdown() {
    menuDropdown?.classList.add('hidden');
  }

  menuDropdownToggle?.addEventListener('click', (e) => {
    e.stopPropagation();
    if (menuDropdown?.classList.contains('hidden')) {
      openMenuDropdown();
    } else {
      closeMenuDropdown();
    }
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (menuDropdown && !menuDropdown.classList.contains('hidden')) {
      if (!menuDropdown.contains(e.target as Node) && !menuDropdownToggle?.contains(e.target as Node)) {
        closeMenuDropdown();
      }
    }
  });

  // Mobile search modal functionality
  const searchToggleMobile = document.getElementById('search-toggle-mobile');
  const mobileSearchModal = document.getElementById('mobile-search-modal');
  const mobileSearchClose = document.getElementById('mobile-search-close');
  const searchModalBackdrop = document.getElementById('search-modal-backdrop');
  const mobileSearchInput = document.getElementById('mobile-search-input') as HTMLInputElement | null;

  function openMobileSearch() {
    mobileSearchModal?.classList.remove('hidden');
    setTimeout(() => mobileSearchInput?.focus(), 100);
  }

  function closeMobileSearch() {
    mobileSearchModal?.classList.add('hidden');
    if (mobileSearchInput) mobileSearchInput.value = '';
  }

  searchToggleMobile?.addEventListener('click', openMobileSearch);
  mobileSearchClose?.addEventListener('click', closeMobileSearch);
  searchModalBackdrop?.addEventListener('click', closeMobileSearch);

  // Search functionality
  const desktopSearchInput = document.getElementById('header-search-input') as HTMLInputElement | null;

  function performSearch(query: string) {
    const currentLocale = document.documentElement.lang || 'de';
    const baseUrl = currentLocale === 'de' ? '/search' : `/${currentLocale}/search`;
    
    if (query.trim()) {
      window.location.href = `${baseUrl}?q=${encodeURIComponent(query.trim())}`;
    } else {
      window.location.href = baseUrl;
    }
  }

  // Handle search on both desktop and mobile inputs
  desktopSearchInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && desktopSearchInput.value) {
      performSearch(desktopSearchInput.value);
    }
  });

  mobileSearchInput?.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' && mobileSearchInput.value) {
      performSearch(mobileSearchInput.value);
      closeMobileSearch();
    } else if (e.key === 'Escape') {
      closeMobileSearch();
    }
  });

  // Escape key handler for search and menu
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      if (mobileSearchModal?.style?.display !== 'none') {
        closeMobileSearch();
      } else if (menuDropdown?.style?.display !== 'none') {
        closeMenuDropdown();
      }
    }
  });

  // Theme toggle functionality (placeholder for future implementation)
  const themeToggle = document.getElementById('theme-toggle');
  
  themeToggle?.addEventListener('click', () => {
    // TODO: Implement theme switching in next step
    console.log('Theme toggle clicked - to be implemented');
    closeMenuDropdown();
  });

  // SIMPLE Language switching (exactly like React app)
  const languageOptions = document.querySelectorAll('.language-option');
  
  languageOptions.forEach(option => {
    option.addEventListener('click', (e) => {
      const selectedLocale = (e.currentTarget as HTMLElement)?.dataset?.locale;
      const currentLocale = document.documentElement.lang || 'de';
      
      if (selectedLocale === currentLocale) {
        closeMenuDropdown();
        return;
      }
      
      handleLanguageChange(selectedLocale);
      closeMenuDropdown();
    });
  });

  // Language change handler with smart chapter number mapping
  function handleLanguageChange(targetLocale: string) {
    const currentPath = window.location.pathname;
    const currentHash = window.location.hash;
    
    // Get current section slug from path
    let path = currentPath.replace(/^\//, ''); // Remove leading slash
    if (path.startsWith('fr/')) path = path.substring(3);
    if (path.startsWith('it/')) path = path.substring(3);
    
    // Handle impressum page
    if (path === 'impressum') {
      const targetUrl = targetLocale === 'de' ? '/impressum' : `/${targetLocale}/impressum`;
      window.location.href = targetUrl;
      return;
    }
    
    // Get all sections from meta tag
    const allSectionsData = document.querySelector('meta[name="all-sections"]')?.getAttribute('content');
    if (!allSectionsData) {
      // Fallback: navigate to start page
      const fallbackUrl = targetLocale === 'de' ? '/' : `/${targetLocale}/`;
      window.location.href = fallbackUrl;
      return;
    }
    
    const allSections = JSON.parse(allSectionsData);
    const currentSections = allSections[document.documentElement.lang || 'de'] || [];
    const targetSections = allSections[targetLocale] || [];
    
    // Find current section by slug
    const currentSection = currentSections.find((s: any) => s.slug === path);
    
    if (currentSection) {
      // Find equivalent section by sorting
      const targetSection = targetSections.find((s: any) => s.sorting === currentSection.sorting);
      
      if (targetSection) {
        const baseTargetUrl = (targetLocale === 'de' ? '/' : `/${targetLocale}/`) + targetSection.slug;
        
        // Smart chapter hash mapping by position/number
        if (currentHash && currentSection.chapters && targetSection.chapters) {
          const currentChapterSlug = currentHash.replace('#', '');
          
          // Find current chapter by slug
          const currentChapterIndex = currentSection.chapters.findIndex((c: any) => c.slug === currentChapterSlug);
          
          if (currentChapterIndex >= 0 && currentChapterIndex < targetSection.chapters.length) {
            // Map to same chapter position in target language
            const targetChapter = targetSection.chapters[currentChapterIndex];
            const targetHash = `#${targetChapter.slug}`;
            
            console.log(`🔄 Chapter mapping: ${currentHash} → ${targetHash} (position ${currentChapterIndex})`);
            window.location.href = baseTargetUrl + targetHash;
            return;
          } else {
            console.log(`❌ Chapter position ${currentChapterIndex} not found in target section`);
          }
        }
        
        // No hash or chapter mapping failed - just go to section
        window.location.href = baseTargetUrl;
        return;
      }
    }
    
    // Fallback: navigate to start page
    const fallbackUrl = targetLocale === 'de' ? '/' : `/${targetLocale}/`;
    window.location.href = fallbackUrl;
  }
</script>

{sectionColorStyle && (
  <style set:html={sectionColorStyle}></style>
)}
